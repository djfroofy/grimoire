// Generated by CoffeeScript 1.6.3
(function() {
  var CommaPlayer, Fretboard, FretboardCanvas, FullChordPlayer, I_ONCE_KNEW_A_PRETTY_GIRL, RandomArpPlayer, STARIN_AT_THE_WALLS, chord_notes, color_map, full_c, get_full_chord, limit_notes, main, trans, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  full_c = [0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120];

  trans = {
    "C": 0,
    "C#": 1,
    "Db": 1,
    "D": 2,
    "D#": 3,
    "Eb": 3,
    "E": 4,
    "F": 5,
    "F#": 6,
    "Gb": 6,
    "G": 7,
    "G#": 8,
    "Ab": 8,
    "A": 9,
    "A#": 10,
    "Bb": 10,
    "B": 11
  };

  chord_notes = {
    "": [0, 4, 7],
    "maj": [0, 4, 7],
    "7": [0, 4, 7, 10],
    "maj7": [0, 4, 7, 11],
    "min": [0, 3, 7],
    "min7": [0, 3, 7, 10],
    "dim": [0, 3, 6],
    "dim7": [0, 3, 6, 10]
  };

  color_map = MusicTheory.Synesthesia.map();

  get_full_chord = function(chord_name) {
    var a, chord, cns, concatenated, full_chords, n, note, split, tcn, tcns, tn;
    split = chord_name.trim().split(" ");
    note = split[0];
    chord = split[1];
    tn = trans[note];
    cns = chord_notes[chord] || [0, 4, 7];
    tcns = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = cns.length; _i < _len; _i++) {
        n = cns[_i];
        _results.push((n + tn) % 12);
      }
      return _results;
    })();
    full_chords = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = full_c.length; _i < _len; _i++) {
        n = full_c[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = tcns.length; _j < _len1; _j++) {
            tcn = tcns[_j];
            _results1.push(n + tcn);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    a = new Array;
    concatenated = full_chords.concat.apply(a, full_chords);
    return concatenated;
  };

  FretboardCanvas = (function() {
    function FretboardCanvas(fretboard) {
      this.fretboard = fretboard;
      this.canvas = document.createElement("canvas");
      window.canvas = this.canvas;
      this.canvas.width = this.width = document.body.clientWidth;
      this.canvas.height = this.height = document.body.clientHeight;
      this.ctx = this.canvas.getContext("2d");
      this.fretwidth = this.width / 8;
      this.border = this.fretwidth / 2;
      this.maxx = this.width - this.border;
      this.maxy = this.height - this.border;
      this.num_strings = this.fretboard.strings.length;
      this.set_xs();
    }

    FretboardCanvas.prototype.set_xs = function() {
      var fretwidth, wherex, _results;
      this.xs = [];
      this.ratio = 1 / Math.pow(2, 1 / 12);
      fretwidth = this.fretwidth;
      wherex = this.maxx;
      _results = [];
      while (wherex > 0) {
        this.xs.push(wherex);
        wherex = wherex - fretwidth;
        _results.push(fretwidth = fretwidth * this.ratio);
      }
      return _results;
    };

    FretboardCanvas.prototype.draw_fretboard = function() {
      var x, _i, _len, _ref;
      this.ctx.beginPath();
      this.ctx.strokeStyle = "red";
      _ref = this.xs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        this.ctx.moveTo(x, this.border);
        this.ctx.lineTo(x, this.height - this.border);
      }
      return this.ctx.stroke();
    };

    FretboardCanvas.prototype.draw_strings = function() {
      var wherey;
      this.ctx.beginPath();
      this.ctx.strokeStyle = "black";
      this.apart = (this.height - this.border * 2) / this.num_strings;
      this.gutter = this.border + this.apart / 2;
      wherey = this.gutter;
      while (wherey < this.height - this.border) {
        this.ctx.moveTo(0, wherey);
        this.ctx.lineTo(this.maxx, wherey);
        wherey += this.apart;
      }
      return this.ctx.stroke();
    };

    FretboardCanvas.prototype.draw_notes = function() {
      var centery, diff, i, pos, radius, string, _i, _j, _len, _len1, _ref, _results;
      this.ctx.strokeStyle = "blue";
      radius = this.apart / 2;
      centery = this.gutter;
      _ref = this.fb_state;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        string = _ref[i];
        for (_j = 0, _len1 = string.length; _j < _len1; _j++) {
          pos = string[_j];
          this.ctx.beginPath();
          if (pos === 0) {
            diff = this.border / 2;
          } else {
            diff = Math.pow(this.ratio, pos) * this.fretwidth / 2;
          }
          this.ctx.arc(this.xs[pos] + diff, centery, radius, 0, 2 * Math.PI);
          this.ctx.fillStyle = color_map[this.fretboard.strings[i] + pos].hex;
          this.ctx.fill();
          this.ctx.stroke();
        }
        _results.push(centery += this.apart);
      }
      return _results;
    };

    FretboardCanvas.prototype.draw_text = function() {
      return this.ctx.fillText(this.chord_name, 10, 50);
    };

    FretboardCanvas.prototype.replace = function(chord_name) {
      this.ctx.clearRect(0, 0, this.width, this.height);
      this.fb_state = this.fretboard.get(chord_name);
      this.chord_name = chord_name;
      return this.draw();
    };

    FretboardCanvas.prototype.draw = function() {
      this.draw_fretboard();
      this.draw_strings();
      this.draw_notes();
      return this.draw_text();
    };

    return FretboardCanvas;

  })();

  Fretboard = (function() {
    function Fretboard(strings) {
      this.strings = strings;
    }

    Fretboard.prototype.get = function(chord_name) {
      /*
      chord comes as string like "G min "
      
      Returns the full fretboard, string by string.
      So, a C major on the ukelele would be:
      [
        [0, 5, 9, 12, ...]  # G string (7)
        [0, 4, 7, 12, ...]  # C string (0)
        [0, 3, 8, 12, ...]  # E string (4)
        [0, 3, 7, 12, ...]  # A string (9)
      ]
      */

      var full_chord, n, ret, s, sret, _i, _j, _len, _ref;
      full_chord = get_full_chord(chord_name);
      ret = [];
      _ref = this.strings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        sret = [];
        for (n = _j = 0; _j <= 17; n = ++_j) {
          if (full_chord.indexOf(s + n) > -1) {
            sret.push(n);
          }
        }
        ret.push(sret);
      }
      return ret;
    };

    return Fretboard;

  })();

  I_ONCE_KNEW_A_PRETTY_GIRL = 'G min,,,,,,C min,,,,,\nG min,,,Bb maj,,,D 7,,,G min,,,\nG min,,,D 7,,,G min,,,\nG min,,,,,,,,,,\nC min,,,,,,,,\nG min,,,,,,,,\nD,,,,,,,,\nG min,,,,,,,,\nD 7,,,,,,,,\nG min,,,,,,,,';

  STARIN_AT_THE_WALLS = 'B,,,,,,,,B maj7,,,,,,,,B 7,,,,,,,,E,,,E 7,,,,,\nB,,,,,,,,B maj7,,,,,,,,B 7,,,,,,,,E,,,E 7,,,,,\nF#,,,,E,,,,G,,,,B,,,,F#,,,,E,,,,D,,,B,,,,,\nF#,,,,E,,,,D,,F#,,,,,,B,,,,';

  CommaPlayer = (function() {
    function CommaPlayer(fbc, comma_song, tempo, loop) {
      this.fbc = fbc;
      this.comma_song = comma_song;
      this.tempo = tempo;
      this.loop = loop != null ? loop : false;
      this.advance = __bind(this.advance, this);
      this.chords = this.comma_song.split(",");
      this.position = 0;
      this.chord = this.chords[this.position];
      this.beats_per_second = this.tempo / 60;
      this.seconds_per_beat = 1 / this.beats_per_second;
      this.ms_per_beat = this.seconds_per_beat * 1000;
    }

    CommaPlayer.prototype.start = function() {
      var self;
      self = this;
      return this.timer = setInterval(function() {
        return self.advance();
      }, this.ms_per_beat);
    };

    CommaPlayer.prototype.stop = function() {
      return clearInterval(this.timer);
    };

    CommaPlayer.prototype.advance = function() {
      this.chord = this.chords[this.position].trim() || this.chord;
      this.fbc.replace(this.chord);
      this.position += 1;
      if (this.position >= this.chords.length) {
        if (this.loop) {
          this.position = 0;
        } else {
          this.stop();
        }
      }
      return this.play_beat();
    };

    CommaPlayer.prototype.play_beat = function() {
      return console.log("Subclasses implement");
    };

    return CommaPlayer;

  })();

  limit_notes = function(notes) {
    var n, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = notes.length; _i < _len; _i++) {
      n = notes[_i];
      if ((100 > n && n > 20)) {
        _results.push(n);
      }
    }
    return _results;
  };

  FullChordPlayer = (function(_super) {
    __extends(FullChordPlayer, _super);

    function FullChordPlayer() {
      _ref = FullChordPlayer.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    FullChordPlayer.prototype.play_beat = function() {
      var notes, sustain;
      sustain = this.seconds_per_beat / 2;
      notes = limit_notes(get_full_chord(this.chord));
      MIDI.chordOn(0, notes, 60, 0);
      return MIDI.chordOff(0, notes, this.sustain);
    };

    return FullChordPlayer;

  })(CommaPlayer);

  RandomArpPlayer = (function(_super) {
    __extends(RandomArpPlayer, _super);

    function RandomArpPlayer() {
      _ref1 = RandomArpPlayer.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    RandomArpPlayer.prototype.play_beat = function() {
      var notes, place, rand, sixteenth, sustain, _results;
      sustain = this.seconds_per_beat / 2;
      sixteenth = this.seconds_per_beat / 4;
      notes = limit_notes(get_full_chord(this.chord));
      place = 0;
      _results = [];
      while (place < this.seconds_per_beat) {
        rand = notes[Math.floor(Math.random() * notes.length)];
        MIDI.noteOn(0, rand, Math.random() * 127, place);
        MIDI.noteOff(0, rand, place + sustain);
        _results.push(place += sixteenth);
      }
      return _results;
    };

    return RandomArpPlayer;

  })(CommaPlayer);

  main = function() {
    var strings;
    strings = [40, 45, 50, 55, 59, 64];
    strings = [28, 33, 38, 43];
    strings = [67, 60, 64, 69];
    window.fb = new Fretboard(strings);
    window.fbc = new FretboardCanvas(fb);
    document.body.appendChild(fbc.canvas);
    fbc.canvas.className = "full";
    window.chord_player = new FullChordPlayer(fbc, I_ONCE_KNEW_A_PRETTY_GIRL, 95, true);
    window.chord_player2 = new RandomArpPlayer(fbc, I_ONCE_KNEW_A_PRETTY_GIRL, 95, true);
    chord_player.start();
    return chord_player2.start();
  };

  window.onload = function() {
    return MIDI.loadPlugin({
      soundfontUrl: "/midi/MIDI.js/soundfont/",
      instrument: "acoustic_grand_piano",
      callback: main
    });
  };

}).call(this);
